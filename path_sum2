# Leetcode: https://leetcode.com/problems/path-sum-ii/description/
# My implementation was average (beats 50%), the deep list copy is slow.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        
        # BFS with sum
        
        if (not root):
            return []
    
        queue = []
        ret = []
        queue.append(([root], root.val))
        
        while (len(queue) > 0):
            tmp, val = queue.pop()
            
            cur = tmp[-1]
            if (tmp[-1].left == None and tmp[-1].right == None):
                if (val == sum):
                    for i in range(len(tmp)):
                        tmp[i] = tmp[i].val
                    ret.append(tmp)
                    
            if (cur.left != None):
                copy = tmp[:]
                copy.append(cur.left)
                queue.append((copy, val + cur.left.val))
            
            if (cur.right != None):
                copy = tmp[:]
                copy.append(cur.right)
                queue.append((copy, val + cur.right.val))
        
        return ret
